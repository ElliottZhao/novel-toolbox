// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3. Define the Book model.
// This model corresponds to the data in `app/api/books/route.ts`.
model Book {
  id             String     @id @default(cuid())
  title          String?
  author         String?
  fanqie_book_id String     @unique
  status         BookStatus @default(DRAFT)
  chapters       Chapter[]
  volumes        Volume[]
  characters     Character[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Volume {
  id      String    @id @default(cuid())
  title   String
  index   Int
  bookId  String
  book    Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookId, index])
  @@unique([bookId, title])
}

// 4. Define the Chapter model.
// This model corresponds to the data in `app/api/chapters/route.ts`.
// It includes a relation to the Book model.
model Chapter {
  id                String        @id @default(cuid())
  title             String
  index             Int
  fanqie_chapter_id String?       @unique
  status            ChapterStatus @default(EMPTY)
  addedAt           DateTime      @default(now())

  bookId    String
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  volumeId  String
  volume    Volume    @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  analysisResult AnalysisResult?
  paragraphs     Paragraph[]
  paragraphSummaries ParagraphSummary[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Paragraph {
  id        String   @id @default(cuid())
  text      String   @db.Text
  order     Int
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  annotations CharacterAnnotation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId, order])
}

// 5. Define the AnalysisResult model.
// This model will store the results of chapter analysis,
// corresponding to concepts like "plotAbstractions" in `app/api/stats/route.ts`.
model AnalysisResult {
  id               String   @id @default(cuid())
  plotAbstractions Json? // Flexible JSON field to store various analysis outputs.
  summary          String?
  analyzedAt       DateTime @default(now())

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 6. Define Enums for status fields.
// Using enums improves data integrity compared to raw strings.
enum BookStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum ChapterStatus {
  EMPTY
  UNANALYZED
  ANALYZED
}

// 角色模型
model Character {
  id          String   @id @default(cuid())
  name        String
  description String?
  aliases     String[] @default([]) // 角色别名数组
  bookId      String
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  annotations CharacterAnnotation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([bookId, name])
}

// 角色标注模型
model CharacterAnnotation {
  id          String   @id @default(cuid())
  startIndex  Int      // 文本在段落中的起始位置
  endIndex    Int      // 文本在段落中的结束位置
  selectedText String  // 选中的文本内容
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  paragraphId String
  paragraph   Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([paragraphId])
  @@index([characterId])
}

// 段落总结模型
model ParagraphSummary {
  id          String   @id @default(cuid())
  title       String   // 总结标题
  content     String   @db.Text // 总结内容
  startIndex  Int      // 起始段落索引
  endIndex    Int      // 结束段落索引
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
  @@index([startIndex, endIndex])
}
